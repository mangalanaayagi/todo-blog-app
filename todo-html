<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo Manager</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            background-color: #f5f5f5;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5rem;
        }
        .todo-form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .filter-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        .filter-btn {
            background-color: #bdc3c7;
        }
        .filter-btn.active {
            background-color: #3498db;
        }
        .todo-list {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .todo-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
        }
        .todo-item:last-child {
            border-bottom: none;
        }
        .todo-text {
            flex: 1;
            margin-left: 10px;
            word-break: break-word;
        }
        .todo-text.completed {
            text-decoration: line-through;
            color: #95a5a6;
        }
        .action-buttons {
            display: flex;
            gap: 5px;
        }
        .complete-btn {
            background-color: #2ecc71;
        }
        .complete-btn:hover {
            background-color: #27ae60;
        }
        .edit-btn {
            background-color: #f39c12;
        }
        .edit-btn:hover {
            background-color: #e67e22;
        }
        .delete-btn {
            background-color: #e74c3c;
        }
        .delete-btn:hover {
            background-color: #c0392b;
        }
        .no-tasks {
            text-align: center;
            color: #7f8c8d;
            padding: 20px;
        }
    </style>
</head>
<body>
    <h1>Todo Manager</h1>
    
    <div class="todo-form">
        <div class="input-group">
            <input type="text" id="taskInput" placeholder="Add a new task...">
            <button id="addTaskBtn">Add Task</button>
        </div>
        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="active">Active</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
        </div>
    </div>
    
    <div class="todo-list" id="taskList">
        <!-- Tasks will appear here -->
    </div>

    <script>
        // DOM Elements
        const taskInput = document.getElementById('taskInput');
        const addTaskBtn = document.getElementById('addTaskBtn');
        const taskList = document.getElementById('taskList');
        const filterButtons = document.querySelectorAll('.filter-btn');
        
        // Load tasks from localStorage or initialize empty array
        let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
        let currentFilter = 'all';
        let editingTaskId = null;
        
        // Initialize the app
        renderTasks();
        
        // Event Listeners
        addTaskBtn.addEventListener('click', handleAddTask);
        taskInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') handleAddTask();
        });
        
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                currentFilter = btn.dataset.filter;
                filterButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                renderTasks();
            });
        });
        
        // Functions
        function handleAddTask() {
            const text = taskInput.value.trim();
            
            if (!text) {
                alert('Please enter a task');
                return;
            }
            
            if (editingTaskId) {
                // Update existing task
                const index = tasks.findIndex(task => task.id === editingTaskId);
                if (index !== -1) {
                    tasks[index].text = text;
                }
                editingTaskId = null;
                addTaskBtn.textContent = 'Add Task';
            } else {
                // Add new task
                const newTask = {
                    id: Date.now().toString(),
                    text,
                    completed: false,
                    createdAt: new Date().toISOString()
                };
                tasks.unshift(newTask); // Add to beginning of array
            }
            
            saveTasks();
            renderTasks();
            clearInput();
        }
        
        function renderTasks() {
            taskList.innerHTML = '';
            
            const filteredTasks = tasks.filter(task => {
                if (currentFilter === 'active') return !task.completed;
                if (currentFilter === 'completed') return task.completed;
                return true; // 'all'
            });
            
            if (filteredTasks.length === 0) {
                taskList.innerHTML = '<p class="no-tasks">No tasks found. Add a new task!</p>';
                return;
            }
            
            filteredTasks.forEach(task => {
                const taskElement = document.createElement('div');
                taskElement.className = 'todo-item';
                taskElement.innerHTML = `
                    <input type="checkbox" ${task.completed ? 'checked' : ''} data-id="${task.id}">
                    <span class="todo-text ${task.completed ? 'completed' : ''}">${task.text}</span>
                    <div class="action-buttons">
                        <button class="edit-btn" data-id="${task.id}">Edit</button>
                        <button class="delete-btn" data-id="${task.id}">Delete</button>
                    </div>
                `;
                taskList.appendChild(taskElement);
            });
            
            // Add event listeners to all interactive elements
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', (e) => {
                    const taskId = e.target.dataset.id;
                    toggleTaskComplete(taskId);
                });
            });
            
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const taskId = e.target.dataset.id;
                    editTask(taskId);
                });
            });
            
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const taskId = e.target.dataset.id;
                    deleteTask(taskId);
                });
            });
        }
        
        function toggleTaskComplete(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                task.completed = !task.completed;
                saveTasks();
                renderTasks();
            }
        }
        
        function editTask(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                taskInput.value = task.text;
                editingTaskId = taskId;
                addTaskBtn.textContent = 'Update Task';
                taskInput.focus();
            }
        }
        
        function deleteTask(taskId) {
            if (confirm('Are you sure you want to delete this task?')) {
                tasks = tasks.filter(task => task.id !== taskId);
                saveTasks();
                renderTasks();
            }
        }
        
        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }
        
        function clearInput() {
            taskInput.value = '';
            editingTaskId = null;
            addTaskBtn.textContent = 'Add Task';
        }
    </script>
</body>
</html>
